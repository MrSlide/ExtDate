{"version":3,"sources":["ExtDate.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;MASqB,O;AAkBnB,uBAAe;AAAA;;AAEb,WAAK,KAAL,sCAAiB,IAAjB,2CAAyB,SAAzB;;AAGA,WAAK,WAAL;AACD;;sBASD,gB,6BAAkB,U,EAAY;AAC5B,aAAO,cAAP,CAAsB,IAAtB,EAA4B,UAA5B,EAAwC;AACtC,eAAO,iBAAY;AAAA;;AAGjB,iBAAO,cAAK,KAAL,EAAW,UAAX,eAA0B,SAA1B,CAAP;AACD,SALqC;AAMtC,kBAAU,KAAK,SAAL,CAAe,UAAf,EAA2B,QANC;AAOtC,oBAAY,KAAK,SAAL,CAAe,UAAf,EAA2B,UAPD;AAQtC,sBAAc,KAAK,SAAL,CAAe,UAAf,EAA2B;AARH,OAAxC;AAUD,K;;sBASD,kB,+BAAoB,Q,EAAU;AAC5B,aAAO,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;AACpC,aAAK,aAAU,QAAV,EAAoB;AAEvB,iBAAO,KAAK,KAAL,CAAW,QAAX,CAAP;AACD,SAJmC;AAKpC,aAAK,aAAU,QAAV,EAAoB;AAEvB,eAAK,KAAL,CAAW,QAAX,IAAuB,QAAvB;AACA,iBAAO,QAAP;AACD,SATmC;AAUpC,oBAAY,KAAK,SAAL,CAAe,QAAf,EAAyB,UAVD;AAWpC,sBAAc,KAAK,SAAL,CAAe,QAAf,EAAyB;AAXH,OAAtC;AAaD,K;;sBAQD,W,0BAAe;AACb,UAAM,YAAY,OAAO,mBAAP,CAA2B,KAAK,SAAhC,CAAlB;AACA,UAAM,YAAY,UAAU,MAA5B;AACA,UAAI,iBAAJ;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAApB,EAA+B,GAA/B,EAAoC;AAClC,mBAAW,UAAU,CAAV,CAAX;;AAEA,YAAI,aAAa,aAAjB,EAAgC;AAE9B;AACD,SAHD,MAGO,IAAI,OAAO,KAAK,SAAL,CAAe,QAAf,CAAP,KAAoC,UAAxC,EAAoD;AAEzD,eAAK,gBAAL,CAAsB,QAAtB;AACD,SAHM,MAGA;AAEL,eAAK,kBAAL,CAAwB,QAAxB;AACD;AACF;AACF,K;;YAWM,G,kBAAO;AACZ,aAAO,KAAK,GAAL,aAAY,SAAZ,CAAP;AACD,K;;YAYM,K,oBAAS;AACd,aAAO,KAAK,KAAL,aAAc,SAAd,CAAP;AACD,K;;YAYM,G,kBAAO;AACZ,aAAO,KAAK,GAAL,aAAY,SAAZ,CAAP;AACD,K;;;;;oBAvIkB,O","file":"ExtDate.js","sourcesContent":["'use strict'\n\n/**\n * @name ExtDate\n * @desc Extends the native Date object with new useful methods.\n * @author Luis Rodrigues (http://www.luisrodriguesweb.com)\n * @version 0.1.0\n * @license MIT\n */\nexport default class ExtDate {\n\n  /**\n   * Creates an instance of ExtDate which implements new methods for\n   * the Date object.\n   *\n   * @access public\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n   * @return {ExtDate} - The ExtDate instance\n   * @since 0.1.0\n   *\n   * @example\n   * new ExtDate();\n   * new ExtDate(547979648008);\n   * new ExtDate('1995-12-17T03:24:00');\n   * new ExtDate(1995, 11, 17);\n   * new ExtDate(1995, 11, 17, 3, 24, 0);\n   */\n  constructor () {\n    // Create a Date instance to use internally\n    this._date = new Date(...arguments)\n\n    // Inject the Date native properties and methods into ExtDate\n    this._extendDate()\n  }\n\n  /**\n   * Injects a given Date method into the class.\n   *\n   * @access private\n   * @param {String} methodName - The name of the method to inject.\n   * @since 0.1.0\n   */\n  _addNativeMethod (methodName) {\n    Object.defineProperty(this, methodName, {\n      value: function () {\n        // Call the method on the internal Date instance with\n        // the provided arguments\n        return this._date[methodName](...arguments)\n      },\n      writable: Date.prototype[methodName].writable,\n      enumerable: Date.prototype[methodName].enumerable,\n      configurable: Date.prototype[methodName].configurable\n    })\n  }\n\n  /**\n   * Injects a given Date property into the class.\n   *\n   * @access private\n   * @param {String} propName - The name of the property to inject.\n   * @since 0.1.0\n   */\n  _addNativeProperty (propName) {\n    Object.defineProperty(this, propName, {\n      get: function (newValue) {\n        // Get the property value from the internal Date instance\n        return this._date[propName]\n      },\n      set: function (newValue) {\n        // Set the value of the property on the internal Date instance\n        this._date[propName] = newValue\n        return newValue\n      },\n      enumerable: Date.prototype[propName].enumerable,\n      configurable: Date.prototype[propName].configurable\n    })\n  }\n\n  /**\n   * Make the ExtDate instance behave like a Date instance.\n   *\n   * @access private\n   * @since 0.1.0\n   */\n  _extendDate () {\n    const dateProps = Object.getOwnPropertyNames(Date.prototype)\n    const propCount = dateProps.length\n    let propName\n\n    for (let i = 0; i < propCount; i++) {\n      propName = dateProps[i]\n\n      if (propName === 'constructor') {\n        // Don't overwrite the ExtDate constructor\n        continue\n      } else if (typeof Date.prototype[propName] === 'function') {\n        // Inject a native Date method\n        this._addNativeMethod(propName)\n      } else {\n        // Inject a native Date property\n        this._addNativeProperty(propName)\n      }\n    }\n  }\n\n  /**\n   * Returns the number of milliseconds passed since the Unix Epoch\n   * (January 1, 1970, 00:00:00) up until the current time.\n   *\n   * @access public\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\n   * @return {Number}\n   * @since 0.1.0\n   */\n  static now () {\n    return Date.now(...arguments)\n  }\n\n  /**\n   * Parses a RFC2822 or ISO 8601 string representation of a date and\n   * returns the number of milliseconds passed since the Unix Epoch\n   * (January 1, 1970, 00:00:00).\n   *\n   * @access public\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\n   * @return {Number}\n   * @since 0.1.0\n   */\n  static parse () {\n    return Date.parse(...arguments)\n  }\n\n  /**\n   * Returns the number of milliseconds passed since the Unix Epoch\n   * (January 1, 1970, 00:00:00, universal time) up until the provided\n   * date and time.\n   *\n   * @access public\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC\n   * @return {Number}\n   * @since 0.1.0\n   */\n  static UTC () {\n    return Date.UTC(...arguments)\n  }\n\n}\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["ExtDate.js"],"names":[],"mappings":"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","file":"ExtDate.js","sourcesContent":["'use strict'\n\n/**\n * @name ExtDate\n * @desc Extends the native Date object with new useful methods.\n * @author Luis Rodrigues (http://www.luisrodriguesweb.com)\n * @version 0.1.0\n * @license MIT\n */\n\n// Number of milliseconds in a single day\nconst msInDay = 86400000\n\nconst extDateMethods = {\n  /**\n   * Sets the time of the day to 00:00:00.000 for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setStartOfDay()\n   */\n  setStartOfDay: function setStartOfDay () {\n    this.setMilliseconds(0)\n    this.setSeconds(0)\n    this.setMinutes(0)\n    this.setHours(0)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the time of the day to 00:00:00.000 for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCStartOfDay()\n   */\n  setUTCStartOfDay: function setUTCStartOfDay () {\n    this.setUTCMilliseconds(0)\n    this.setUTCSeconds(0)\n    this.setUTCMinutes(0)\n    this.setUTCHours(0)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the first day of the year for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setFirstDayOfYear(2016)\n   */\n  setFirstDayOfYear: function setFirstDayOfYear (year) {\n    this.setStartOfDay()\n\n    this.setDate(1)\n    this.setMonth(0)\n\n    if (year) {\n      this.setFullYear(year)\n    }\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the first day of the year for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCFirstDayOfYear(2016)\n   */\n  setUTCFirstDayOfYear: function setUTCFirstDayOfYear (year) {\n    this.setUTCStartOfDay()\n\n    this.setUTCDate(1)\n    this.setUTCMonth(0)\n\n    if (year) {\n      this.setUTCFullYear(year)\n    }\n\n    return this.getTime()\n  },\n\n  /**\n   * Returns the day of the year for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The day of the year for the specified date.\n   * @since 0.1.0\n   *\n   * @example\n   * var dayfOfYear = dateInstance.getDayOfYear()\n   */\n  getDayOfYear: function getDayOfYear () {\n    const helperDate = new Date(this.getTime())\n\n    let dayCount = helperDate.getDate()\n    let i = helperDate.getMonth()\n\n    while (i > 0) {\n      helperDate.setDate(0)\n      dayCount += helperDate.getDate()\n\n      i--\n    }\n\n    return dayCount\n  },\n\n  /**\n   * Returns the day of the year for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The day of the year for the specified date.\n   * @since 0.1.0\n   *\n   * @example\n   * var dayfOfYear = dateInstance.getUTCDayOfYear()\n   */\n  getUTCDayOfYear: function getUTCDayOfYear () {\n    const helperDate = new Date(this.getTime())\n\n    let dayCount = helperDate.getUTCDate()\n    let i = helperDate.getUTCMonth()\n\n    while (i > 0) {\n      helperDate.setUTCDate(0)\n      dayCount += helperDate.getUTCDate()\n\n      i--\n    }\n\n    return dayCount\n  },\n\n  /**\n   * Sets the day of the year for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {Number} day - An integer between 1 and 365 (or 366, if the year is a leap year) representing the day of the year.\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setDayOfYear(45, 2016)\n   */\n  setDayOfYear: function setDayOfYear (day, year) {\n    if (year) {\n      this.setFullYear(year)\n    }\n\n    this.setFirstDayOfYear()\n    this.setDate(day)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the day of the year for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {Number} day - An integer between 1 and 365 (or 366, if the year is a leap year) representing the day of the year.\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCDayOfYear(45, 2016)\n   */\n  setUTCDayOfYear: function setUTCDayOfYear (day, year) {\n    if (year) {\n      this.setUTCFullYear(year)\n    }\n\n    this.setUTCFirstDayOfYear()\n    this.setUTCDate(day)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the first day of the first week of the year for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setFirstWeekOfYear(2016)\n   */\n  setFirstWeekOfYear: function setFirstWeekOfYear (year) {\n    this.setFirstDayOfYear(year)\n    let offset\n\n    // Weeks start on Mondays\n    let day = this.getDay() - 1\n\n    if (day < 0) {\n      day = 6\n    }\n\n    // The first week of the year must include the 4th of January\n    if (day > 3) {\n      offset = (7 - day) * msInDay\n    } else {\n      offset = -day * msInDay\n    }\n\n    // Adjust the date with the calculated offset\n    this.setTime(this.getTime() + offset)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the first day of the first week of the year for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCFirstWeekOfYear(2016)\n   */\n  setUTCFirstWeekOfYear: function setUTCFirstWeekOfYear (year) {\n    this.setUTCFirstDayOfYear(year)\n    let offset\n\n    // Weeks start on Mondays\n    let day = this.getUTCDay() - 1\n\n    if (day < 0) {\n      day = 6\n    }\n\n    // The first week of the year must include the 4th of January\n    if (day > 3) {\n      offset = (7 - day) * msInDay\n    } else {\n      offset = -day * msInDay\n    }\n\n    // Adjust the date with the calculated offset\n    this.setTime(this.getTime() + offset)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the first day of a week number for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {Number} week - An integer between 1 and 53, representing the week.\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setWeek(2, 2016)\n   */\n  setWeek: function setWeek (week, year) {\n    const offset = (week - 1) * 7\n\n    this.setFirstWeekOfYear(year)\n    this.setDate(this.getDate() + offset)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the first day of a week number for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {Number} week - An integer between 1 and 53, representing the week.\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCWeek(2, 2016)\n   */\n  setUTCWeek: function setUTCWeek (week, year) {\n    const offset = (week - 1) * 7\n\n    this.setUTCFirstWeekOfYear(year)\n    this.setUTCDate(this.getUTCDate() + offset)\n\n    return this.getTime()\n  },\n\n  /**\n   * Gets the week number of the specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * var weekNumber = dateInstance.getWeek()\n   */\n  getWeek: function getWeek () {\n    const day = this.getDayOfYear()\n    const weekDay = this.getDay() || 7\n    const week = Math.floor((day - weekDay + 10) / 7)\n\n    return week !== 53 ? week : 1\n  },\n\n  /**\n   * Gets the week number of the specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * var weekNumber = dateInstance.getUTCWeek()\n   */\n  getUTCWeek: function getUTCWeek () {\n    const day = this.getUTCDayOfYear()\n    const weekDay = this.getUTCDay() || 7\n    const week = Math.floor((day - weekDay + 10) / 7)\n\n    return week !== 53 ? week : 1\n  }\n}\n\n/**\n * Copy the properties of one object into another.\n *\n * @param {Object} src - The object to get the properties from.\n * @param {Object} dest - The object to copy the properties into.\n * @return {Object} - The extended object\n * @since 0.1.0\n */\nfunction extend (src, dest) {\n  const keys = Object.keys(src)\n\n  keys.forEach(function (prop) {\n    Object.defineProperty(dest, prop, {\n      value: src[prop],\n      enumerable: false,\n      configurable: false,\n      writable: false\n    })\n  })\n\n  return dest\n}\n\n/**\n * Creates an instance of ExtDate which implements new methods for\n * the Date object.\n *\n * @function\n * @constructs\n * @public\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n * @return {Date|String} - The Date instance with the added methods, or a string representation of the date if called as a function.\n * @since 0.1.0\n *\n * @example\n * var currentDateTime = ExtDate()\n *\n * @example\n * new ExtDate()\n * new ExtDate(547979648008)\n * new ExtDate('1995-12-17T03:24:00')\n * new ExtDate(1995, 11, 17)\n * new ExtDate(1995, 11, 17, 3, 24, 0)\n */\nexport default function ExtDate (year, month, day, hour, minutes, seconds, milliseconds) {\n  if (!(this instanceof ExtDate)) {\n    return Date(...arguments)\n  }\n\n  // Create a Date instance to use internally\n  const date = new Date(...arguments)\n\n  return extend(extDateMethods, date)\n}\n\n// Extend ExtDate with Date's static methods\nconst staticProps = Object.getOwnPropertyNames(Date)\n\nstaticProps.forEach(function (prop) {\n  if (typeof Date[prop] === 'function') {\n    Object.defineProperty(ExtDate, prop, {\n      value: Date[prop],\n      enumerable: false,\n      configurable: false,\n      writable: false\n    })\n  }\n})\n"],"sourceRoot":"/source/"}
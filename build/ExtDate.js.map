{"version":3,"sources":["ExtDate.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;MASqB,O;AAEnB,uBAAe;AAAA;;AACb,WAAK,KAAL,sCAAiB,IAAjB,2CAAyB,SAAzB;;AAEA,WAAK,WAAL;AACD;;sBAED,gB,6BAAkB,U,EAAY;AAC5B,aAAO,cAAP,CAAsB,IAAtB,EAA4B,UAA5B,EAAwC;AACtC,eAAO,iBAAY;AAAA;;AACjB,iBAAO,cAAK,KAAL,EAAW,UAAX,eAA0B,SAA1B,CAAP;AACD,SAHqC;AAItC,kBAAU,KAAK,SAAL,CAAe,UAAf,EAA2B,QAJC;AAKtC,oBAAY,KAAK,SAAL,CAAe,UAAf,EAA2B,UALD;AAMtC,sBAAc,KAAK,SAAL,CAAe,UAAf,EAA2B;AANH,OAAxC;AAQD,K;;sBAED,kB,+BAAoB,Q,EAAU;AAC5B,aAAO,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;AACpC,aAAK,aAAU,QAAV,EAAoB;AACvB,iBAAO,KAAK,KAAL,CAAW,QAAX,CAAP;AACD,SAHmC;AAIpC,aAAK,aAAU,QAAV,EAAoB;AACvB,eAAK,KAAL,CAAW,QAAX,IAAuB,QAAvB;AACA,iBAAO,QAAP;AACD,SAPmC;AAQpC,oBAAY,KAAK,SAAL,CAAe,QAAf,EAAyB,UARD;AASpC,sBAAc,KAAK,SAAL,CAAe,QAAf,EAAyB;AATH,OAAtC;AAWD,K;;sBAED,W,0BAAe;AACb,UAAM,YAAY,OAAO,mBAAP,CAA2B,KAAK,SAAhC,CAAlB;AACA,UAAM,YAAY,UAAU,MAA5B;AACA,UAAI,iBAAJ;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAApB,EAA+B,GAA/B,EAAoC;AAClC,mBAAW,UAAU,CAAV,CAAX;;AAEA,YAAI,aAAa,aAAjB,EAAgC;AAC9B;AACD,SAFD,MAEO,IAAI,OAAO,KAAK,SAAL,CAAe,QAAf,CAAP,KAAoC,UAAxC,EAAoD;AACzD,eAAK,gBAAL,CAAsB,QAAtB;AACD,SAFM,MAEA;AACL,eAAK,kBAAL,CAAwB,QAAxB;AACD;AACF;AACF,K;;YAEM,G,kBAAO;AACZ,aAAO,KAAK,GAAL,aAAY,SAAZ,CAAP;AACD,K;;YAEM,K,oBAAS;AACd,aAAO,KAAK,KAAL,aAAc,SAAd,CAAP;AACD,K;;YAEM,G,kBAAO;AACZ,aAAO,KAAK,GAAL,aAAY,SAAZ,CAAP;AACD,K;;;;;oBA7DkB,O","file":"ExtDate.js","sourcesContent":["'use strict'\n\n/**\n * @name ExtDate\n * @desc Extends the native Date object with new useful methods.\n * @author Luis Rodrigues (http://www.luisrodriguesweb.com)\n * @version 0.1.0\n * @license MIT\n */\nexport default class ExtDate {\n\n  constructor () {\n    this._date = new Date(...arguments)\n\n    this._extendDate()\n  }\n\n  _addNativeMethod (methodName) {\n    Object.defineProperty(this, methodName, {\n      value: function () {\n        return this._date[methodName](...arguments)\n      },\n      writable: Date.prototype[methodName].writable,\n      enumerable: Date.prototype[methodName].enumerable,\n      configurable: Date.prototype[methodName].configurable\n    })\n  }\n\n  _addNativeProperty (propName) {\n    Object.defineProperty(this, propName, {\n      get: function (newValue) {\n        return this._date[propName]\n      },\n      set: function (newValue) {\n        this._date[propName] = newValue\n        return newValue\n      },\n      enumerable: Date.prototype[propName].enumerable,\n      configurable: Date.prototype[propName].configurable\n    })\n  }\n\n  _extendDate () {\n    const dateProps = Object.getOwnPropertyNames(Date.prototype)\n    const propCount = dateProps.length\n    let propName\n\n    for (let i = 0; i < propCount; i++) {\n      propName = dateProps[i]\n\n      if (propName === 'constructor') {\n        continue\n      } else if (typeof Date.prototype[propName] === 'function') {\n        this._addNativeMethod(propName)\n      } else {\n        this._addNativeProperty(propName)\n      }\n    }\n  }\n\n  static now () {\n    return Date.now(...arguments)\n  }\n\n  static parse () {\n    return Date.parse(...arguments)\n  }\n\n  static UTC () {\n    return Date.UTC(...arguments)\n  }\n\n}\n"],"sourceRoot":"/source/"}
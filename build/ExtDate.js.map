{"version":3,"sources":["ExtDate.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;oBAscwB,O;;AA3bxB,MAAM,UAAU,QAAhB;;AAEA,MAAM,iBAAiB;AAUrB,oBAAgB,SAAS,cAAT,CAAyB,GAAzB,EAA8B;AAC5C,YAAM,MAAM,KAAN,GAAc,EAApB;;AAEA,mBAAW,GAAX,mBAA8B,CAA9B;AACA,mBAAW,GAAX,cAAyB,CAAzB;AACA,mBAAW,GAAX,cAAyB,CAAzB;AACA,mBAAW,GAAX,YAAuB,CAAvB;;AAEA,aAAO,KAAK,OAAL,EAAP;AACD,KAnBoB;;AAgCrB,mBAAe,SAAS,aAAT,GAA0B;AACvC,aAAO,KAAK,cAAL,EAAP;AACD,KAlCoB;;AA+CrB,sBAAkB,SAAS,gBAAT,GAA6B;AAC7C,aAAO,KAAK,cAAL,CAAoB,IAApB,CAAP;AACD,KAjDoB;;AA6DrB,wBAAoB,SAAS,kBAAT,CAA6B,IAA7B,EAAmC,GAAnC,EAAwC;AAC1D,YAAM,MAAM,KAAN,GAAc,EAApB;;AAEA,WAAK,cAAL,CAAoB,CAAC,CAAC,GAAtB;;AAEA,mBAAW,GAAX,WAAsB,CAAtB;AACA,mBAAW,GAAX,YAAuB,CAAvB;;AAEA,UAAI,IAAJ,EAAU;AACR,qBAAW,GAAX,eAA0B,IAA1B;AACD;;AAED,aAAO,KAAK,OAAL,EAAP;AACD,KA1EoB;;AAwFrB,uBAAmB,SAAS,iBAAT,CAA4B,IAA5B,EAAkC;AACnD,aAAO,KAAK,kBAAL,CAAwB,IAAxB,CAAP;AACD,KA1FoB;;AAwGrB,0BAAsB,SAAS,oBAAT,CAA+B,IAA/B,EAAqC;AACzD,aAAO,KAAK,kBAAL,CAAwB,IAAxB,EAA8B,IAA9B,CAAP;AACD,KA1GoB;;AAqHrB,mBAAe,SAAS,aAAT,CAAwB,GAAxB,EAA6B;AAC1C,YAAM,MAAM,KAAN,GAAc,EAApB;;AAEA,UAAM,aAAa,IAAI,IAAJ,CAAS,KAAK,OAAL,EAAT,CAAnB;;AAEA,UAAI,WAAW,mBAAiB,GAAjB,YAAf;AACA,UAAI,IAAI,mBAAiB,GAAjB,aAAR;;AAEA,aAAO,IAAI,CAAX,EAAc;AACZ,2BAAiB,GAAjB,WAA4B,CAA5B;AACA,oBAAY,mBAAiB,GAAjB,YAAZ;;AAEA;AACD;;AAED,aAAO,QAAP;AACD,KArIoB;;AAkJrB,kBAAc,SAAS,YAAT,GAAyB;AACrC,aAAO,KAAK,aAAL,EAAP;AACD,KApJoB;;AAiKrB,qBAAiB,SAAS,eAAT,GAA4B;AAC3C,aAAO,KAAK,aAAL,CAAmB,IAAnB,CAAP;AACD,KAnKoB;;AAgLrB,mBAAe,SAAS,aAAT,CAAwB,GAAxB,EAA6B,IAA7B,EAAmC,GAAnC,EAAwC;AACrD,YAAM,MAAM,KAAN,GAAc,EAApB;;AAEA,UAAI,IAAJ,EAAU;AACR,qBAAW,GAAX,eAA0B,IAA1B;AACD;;AAED,WAAK,kBAAL,CAAwB,IAAxB,EAA8B,CAAC,CAAC,GAAhC;AACA,mBAAW,GAAX,WAAsB,GAAtB;;AAEA,aAAO,KAAK,OAAL,EAAP;AACD,KA3LoB;;AA0MrB,kBAAc,SAAS,YAAT,CAAuB,GAAvB,EAA4B,IAA5B,EAAkC;AAC9C,aAAO,KAAK,aAAL,CAAmB,GAAnB,EAAwB,IAAxB,CAAP;AACD,KA5MoB;;AA2NrB,qBAAiB,SAAS,eAAT,CAA0B,GAA1B,EAA+B,IAA/B,EAAqC;AACpD,aAAO,KAAK,aAAL,CAAmB,GAAnB,EAAwB,IAAxB,EAA8B,IAA9B,CAAP;AACD,KA7NoB;;AAyOrB,yBAAqB,SAAS,mBAAT,CAA8B,IAA9B,EAAoC,GAApC,EAAyC;AAC5D,YAAM,MAAM,KAAN,GAAc,EAApB;;AAEA,WAAK,kBAAL,CAAwB,IAAxB,EAA8B,CAAC,CAAC,GAAhC;AACA,UAAI,eAAJ;;AAGA,UAAI,MAAM,aAAW,GAAX,cAAyB,CAAnC;;AAEA,UAAI,MAAM,CAAV,EAAa;AACX,cAAM,CAAN;AACD;;AAGD,UAAI,MAAM,CAAV,EAAa;AACX,iBAAS,IAAI,GAAb;AACD,OAFD,MAEO;AACL,iBAAS,CAAC,GAAV;AACD;;AAGD,mBAAW,GAAX,WAAsB,aAAW,GAAX,eAA0B,MAAhD;;AAEA,aAAO,KAAK,OAAL,EAAP;AACD,KAjQoB;;AA+QrB,wBAAoB,SAAS,kBAAT,CAA6B,IAA7B,EAAmC;AACrD,aAAO,KAAK,mBAAL,CAAyB,IAAzB,CAAP;AACD,KAjRoB;;AA+RrB,2BAAuB,SAAS,qBAAT,CAAgC,IAAhC,EAAsC;AAC3D,aAAO,KAAK,mBAAL,CAAyB,IAAzB,EAA+B,IAA/B,CAAP;AACD,KAjSoB;;AA8SrB,cAAU,SAAS,QAAT,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,GAA/B,EAAoC;AAC5C,YAAM,MAAM,KAAN,GAAc,EAApB;;AAEA,UAAM,SAAS,CAAC,OAAO,CAAR,IAAa,CAA5B;;AAEA,WAAK,mBAAL,CAAyB,IAAzB,EAA+B,CAAC,CAAC,GAAjC;AACA,mBAAW,GAAX,WAAsB,aAAW,GAAX,eAA0B,MAAhD;;AAEA,aAAO,KAAK,OAAL,EAAP;AACD,KAvToB;;AAsUrB,aAAS,SAAS,OAAT,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B;AACrC,aAAO,KAAK,QAAL,CAAc,IAAd,EAAoB,IAApB,CAAP;AACD,KAxUoB;;AAuVrB,gBAAY,SAAS,UAAT,CAAqB,IAArB,EAA2B,IAA3B,EAAiC;AAC3C,aAAO,KAAK,QAAL,CAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,CAAP;AACD,KAzVoB;;AAoWrB,cAAU,SAAS,QAAT,CAAmB,GAAnB,EAAwB;AAChC,YAAM,MAAM,KAAN,GAAc,EAApB;;AAEA,UAAM,MAAM,KAAK,aAAL,CAAmB,CAAC,CAAC,GAArB,CAAZ;AACA,UAAM,UAAU,aAAW,GAAX,eAA0B,CAA1C;AACA,UAAM,OAAO,KAAK,KAAL,CAAW,CAAC,MAAM,OAAN,GAAgB,EAAjB,IAAuB,CAAlC,CAAb;;AAEA,aAAO,SAAS,EAAT,GAAc,IAAd,GAAqB,CAA5B;AACD,KA5WoB;;AAyXrB,aAAS,SAAS,OAAT,GAAoB;AAC3B,aAAO,KAAK,QAAL,EAAP;AACD,KA3XoB;;AAwYrB,gBAAY,SAAS,UAAT,GAAuB;AACjC,aAAO,KAAK,QAAL,CAAc,IAAd,CAAP;AACD;AA1YoB,GAAvB;;AAqZA,WAAS,MAAT,CAAiB,GAAjB,EAAsB,IAAtB,EAA4B;AAC1B,QAAM,OAAO,OAAO,IAAP,CAAY,GAAZ,CAAb;;AAEA,SAAK,OAAL,CAAa,UAAU,IAAV,EAAgB;AAC3B,aAAO,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC;AAChC,eAAO,IAAI,IAAJ,CADyB;AAEhC,oBAAY,KAFoB;AAGhC,sBAAc,KAHkB;AAIhC,kBAAU;AAJsB,OAAlC;AAMD,KAPD;;AASA,WAAO,IAAP;AACD;;AAuBc,WAAS,OAAT,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,GAA/B,EAAoC,IAApC,EAA0C,OAA1C,EAAmD,OAAnD,EAA4D,YAA5D,EAA0E;AACvF,QAAI,EAAE,gBAAgB,OAAlB,CAAJ,EAAgC;AAC9B,aAAO,sBAAQ,SAAR,CAAP;AACD;;AAGD,QAAM,0CAAW,IAAX,2CAAmB,SAAnB,MAAN;;AAEA,WAAO,OAAO,cAAP,EAAuB,IAAvB,CAAP;AACD;;AAGD,MAAM,cAAc,OAAO,mBAAP,CAA2B,IAA3B,CAApB;;AAEA,cAAY,OAAZ,CAAoB,UAAU,IAAV,EAAgB;AAClC,QAAI,OAAO,KAAK,IAAL,CAAP,KAAsB,UAA1B,EAAsC;AACpC,aAAO,cAAP,CAAsB,OAAtB,EAA+B,IAA/B,EAAqC;AACnC,eAAO,KAAK,IAAL,CAD4B;AAEnC,oBAAY,KAFuB;AAGnC,sBAAc,KAHqB;AAInC,kBAAU;AAJyB,OAArC;AAMD;AACF,GATD","file":"ExtDate.js","sourcesContent":["'use strict'\n\n/**\n * @name ExtDate\n * @desc Extends the native Date object with new useful methods.\n * @author Luis Rodrigues (http://www.luisrodriguesweb.com)\n * @version 0.1.0\n * @license MIT\n */\n\n// Number of milliseconds in a single day\nconst msInDay = 86400000\n\nconst extDateMethods = {\n  /**\n   * Sets the time of the day to 00:00:00.000 for a specified date according to local or univeral time.\n   *\n   * @memberof ExtDate\n   * @private\n   * @param {?Boolean} [utc] - Set to `true` to perform operations in univeral time.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   */\n  _setStartOfDay: function _setStartOfDay (utc) {\n    utc = utc ? 'UTC' : ''\n\n    this[`set${utc}Milliseconds`](0)\n    this[`set${utc}Seconds`](0)\n    this[`set${utc}Minutes`](0)\n    this[`set${utc}Hours`](0)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the time of the day to 00:00:00.000 for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setStartOfDay()\n   */\n  setStartOfDay: function setStartOfDay () {\n    return this._setStartOfDay()\n  },\n\n  /**\n   * Sets the time of the day to 00:00:00.000 for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCStartOfDay()\n   */\n  setUTCStartOfDay: function setUTCStartOfDay () {\n    return this._setStartOfDay(true)\n  },\n\n  /**\n   * Sets the first day of the year for a specified date according to local or univeral time.\n   *\n   * @memberof ExtDate\n   * @private\n   * @param {?Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @param {?Boolean} [utc] - Set to `true` to perform operations in univeral time.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   */\n  _setFirstDayOfYear: function _setFirstDayOfYear (year, utc) {\n    utc = utc ? 'UTC' : ''\n\n    this._setStartOfDay(!!utc)\n\n    this[`set${utc}Date`](1)\n    this[`set${utc}Month`](0)\n\n    if (year) {\n      this[`set${utc}FullYear`](year)\n    }\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the first day of the year for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {?Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setFirstDayOfYear(2016)\n   */\n  setFirstDayOfYear: function setFirstDayOfYear (year) {\n    return this._setFirstDayOfYear(year)\n  },\n\n  /**\n   * Sets the first day of the year for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {?Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCFirstDayOfYear(2016)\n   */\n  setUTCFirstDayOfYear: function setUTCFirstDayOfYear (year) {\n    return this._setFirstDayOfYear(year, true)\n  },\n\n  /**\n   * Returns the day of the year for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @private\n   * @param {?Boolean} [utc] - Set to `true` to perform operations in univeral time.\n   * @return {Number} - The day of the year for the specified date.\n   * @since 0.1.0\n   */\n  _getDayOfYear: function _getDayOfYear (utc) {\n    utc = utc ? 'UTC' : ''\n\n    const helperDate = new Date(this.getTime())\n\n    let dayCount = helperDate[`get${utc}Date`]()\n    let i = helperDate[`get${utc}Month`]()\n\n    while (i > 0) {\n      helperDate[`set${utc}Date`](0)\n      dayCount += helperDate[`get${utc}Date`]()\n\n      i--\n    }\n\n    return dayCount\n  },\n\n  /**\n   * Returns the day of the year for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The day of the year for the specified date.\n   * @since 0.1.0\n   *\n   * @example\n   * var dayfOfYear = dateInstance.getDayOfYear()\n   */\n  getDayOfYear: function getDayOfYear () {\n    return this._getDayOfYear()\n  },\n\n  /**\n   * Returns the day of the year for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The day of the year for the specified date.\n   * @since 0.1.0\n   *\n   * @example\n   * var dayfOfYear = dateInstance.getUTCDayOfYear()\n   */\n  getUTCDayOfYear: function getUTCDayOfYear () {\n    return this._getDayOfYear(true)\n  },\n\n  /**\n   * Sets the day of the year for a specified date according to local or universal time.\n   *\n   * @memberof ExtDate\n   * @private\n   * @param {Number} day - An integer between 1 and 365 (or 366, if the year is a leap year) representing the day of the year.\n   * @param {?Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @param {?Boolean} [utc] - Set to `true` to perform operations in univeral time.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   */\n  _setDayOfYear: function _setDayOfYear (day, year, utc) {\n    utc = utc ? 'UTC' : ''\n\n    if (year) {\n      this[`set${utc}FullYear`](year)\n    }\n\n    this._setFirstDayOfYear(year, !!utc)\n    this[`set${utc}Date`](day)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the day of the year for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {Number} day - An integer between 1 and 365 (or 366, if the year is a leap year) representing the day of the year.\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setDayOfYear(45, 2016)\n   */\n  setDayOfYear: function setDayOfYear (day, year) {\n    return this._setDayOfYear(day, year)\n  },\n\n  /**\n   * Sets the day of the year for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {Number} day - An integer between 1 and 365 (or 366, if the year is a leap year) representing the day of the year.\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCDayOfYear(45, 2016)\n   */\n  setUTCDayOfYear: function setUTCDayOfYear (day, year) {\n    return this._setDayOfYear(day, year, true)\n  },\n\n  /**\n   * Sets the first day of the first week of the year for a specified date according to local or univeral time.\n   *\n   * @memberof ExtDate\n   * @private\n   * @param {?Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @param {?Boolean} [utc] - Set to `true` to perform operations in univeral time.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   */\n  _setFirstWeekOfYear: function _setFirstWeekOfYear (year, utc) {\n    utc = utc ? 'UTC' : ''\n\n    this._setFirstDayOfYear(year, !!utc)\n    let offset\n\n    // Weeks start on Mondays\n    let day = this[`get${utc}Day`]() - 1\n\n    if (day < 0) {\n      day = 6\n    }\n\n    // The first week of the year must include the 4th of January\n    if (day > 3) {\n      offset = 7 - day\n    } else {\n      offset = -day\n    }\n\n    // Adjust the date with the calculated offset\n    this[`set${utc}Date`](this[`get${utc}Date`]() + offset)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the first day of the first week of the year for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {?Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setFirstWeekOfYear(2016)\n   */\n  setFirstWeekOfYear: function setFirstWeekOfYear (year) {\n    return this._setFirstWeekOfYear(year)\n  },\n\n  /**\n   * Sets the first day of the first week of the year for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCFirstWeekOfYear(2016)\n   */\n  setUTCFirstWeekOfYear: function setUTCFirstWeekOfYear (year) {\n    return this._setFirstWeekOfYear(year, true)\n  },\n\n  /**\n   * Sets the first day of a week number for a specified date according to local or universal time.\n   *\n   * @memberof ExtDate\n   * @private\n   * @param {Number} week - An integer between 1 and 53, representing the week.\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @param {?Boolean} [utc] - Set to `true` to perform operations in univeral time.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   */\n  _setWeek: function _setWeek (week, year, utc) {\n    utc = utc ? 'UTC' : ''\n\n    const offset = (week - 1) * 7\n\n    this._setFirstWeekOfYear(year, !!utc)\n    this[`set${utc}Date`](this[`get${utc}Date`]() + offset)\n\n    return this.getTime()\n  },\n\n  /**\n   * Sets the first day of a week number for a specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {Number} week - An integer between 1 and 53, representing the week.\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setWeek(2, 2016)\n   */\n  setWeek: function setWeek (week, year) {\n    return this._setWeek(week, year)\n  },\n\n  /**\n   * Sets the first day of a week number for a specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @param {Number} week - An integer between 1 and 53, representing the week.\n   * @param {!Number} [year] - If not specified, the year of the specified date will remain unchanged.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * dateInstance.setUTCWeek(2, 2016)\n   */\n  setUTCWeek: function setUTCWeek (week, year) {\n    return this._setWeek(week, year, true)\n  },\n\n  /**\n   * Gets the week number of the specified date according to local or universal time.\n   *\n   * @memberof ExtDate\n   * @private\n   * @param {?Boolean} [utc] - Set to `true` to perform operations in univeral time.\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   */\n  _getWeek: function _getWeek (utc) {\n    utc = utc ? 'UTC' : ''\n\n    const day = this._getDayOfYear(!!utc)\n    const weekDay = this[`get${utc}Day`]() || 7\n    const week = Math.floor((day - weekDay + 10) / 7)\n\n    return week !== 53 ? week : 1\n  },\n\n  /**\n   * Gets the week number of the specified date according to local time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * var weekNumber = dateInstance.getWeek()\n   */\n  getWeek: function getWeek () {\n    return this._getWeek()\n  },\n\n  /**\n   * Gets the week number of the specified date according to universal time.\n   *\n   * @memberof ExtDate\n   * @public\n   * @return {Number} - The number of milliseconds since 1 January 1970 00:00:00 UTC.\n   * @since 0.1.0\n   *\n   * @example\n   * var weekNumber = dateInstance.getUTCWeek()\n   */\n  getUTCWeek: function getUTCWeek () {\n    return this._getWeek(true)\n  }\n}\n\n/**\n * Copy the properties of one object into another.\n *\n * @param {Object} src - The object to get the properties from.\n * @param {Object} dest - The object to copy the properties into.\n * @return {Object} - The extended object\n * @since 0.1.0\n */\nfunction extend (src, dest) {\n  const keys = Object.keys(src)\n\n  keys.forEach(function (prop) {\n    Object.defineProperty(dest, prop, {\n      value: src[prop],\n      enumerable: false,\n      configurable: false,\n      writable: false\n    })\n  })\n\n  return dest\n}\n\n/**\n * Creates an instance of ExtDate which implements new methods for\n * the Date object.\n *\n * @function\n * @constructs\n * @public\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n * @return {Date|String} - The Date instance with the added methods, or a string representation of the date if called as a function.\n * @since 0.1.0\n *\n * @example\n * var currentDateTime = ExtDate()\n *\n * @example\n * new ExtDate()\n * new ExtDate(547979648008)\n * new ExtDate('1995-12-17T03:24:00')\n * new ExtDate(1995, 11, 17)\n * new ExtDate(1995, 11, 17, 3, 24, 0)\n */\nexport default function ExtDate (year, month, day, hour, minutes, seconds, milliseconds) {\n  if (!(this instanceof ExtDate)) {\n    return Date(...arguments)\n  }\n\n  // Create a Date instance to use internally\n  const date = new Date(...arguments)\n\n  return extend(extDateMethods, date)\n}\n\n// Extend ExtDate with Date's static methods\nconst staticProps = Object.getOwnPropertyNames(Date)\n\nstaticProps.forEach(function (prop) {\n  if (typeof Date[prop] === 'function') {\n    Object.defineProperty(ExtDate, prop, {\n      value: Date[prop],\n      enumerable: false,\n      configurable: false,\n      writable: false\n    })\n  }\n})\n"],"sourceRoot":"/source/"}